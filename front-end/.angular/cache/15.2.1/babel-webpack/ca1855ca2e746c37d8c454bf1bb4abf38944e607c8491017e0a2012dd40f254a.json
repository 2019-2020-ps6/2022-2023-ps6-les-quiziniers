{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { serverUrl, httpOptionsBase } from '../configs/server.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    /*\r\n     The list of user.\r\n     */\n    this.users = [];\n    /*\r\n     Observable which contains the list of the user.\r\n     */\n    this.users$ = new BehaviorSubject([]);\n    this.userSelected$ = new Subject();\n    this.userUrl = serverUrl + '/users';\n    this.httpOptions = httpOptionsBase;\n    this.retrieveUsers();\n  }\n  retrieveUsers() {\n    this.http.get(this.userUrl).subscribe(userList => {\n      this.users = userList;\n      this.users$.next(this.users);\n    });\n  }\n  addUser(user) {\n    this.http.post(this.userUrl, user, this.httpOptions).subscribe(() => this.retrieveUsers());\n  }\n  setSelectedUser(userId) {\n    const urlWithId = this.userUrl + '/' + userId;\n    this.http.get(urlWithId).subscribe(user => {\n      this.userSelected$.next(user);\n    });\n  }\n  deleteUser(user) {\n    const urlWithId = this.userUrl + '/' + user.id;\n    this.http.delete(urlWithId, this.httpOptions).subscribe(() => this.retrieveUsers());\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,OAAO,QAAQ,MAAM;AAE/C,SAASC,SAAS,EAAEC,eAAe,QAAQ,0BAA0B;;;AAKrE,OAAM,MAAOC,WAAW;EAkBtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAjBxB;;;IAGQ,UAAK,GAAW,EAAE;IAE1B;;;IAGO,WAAM,GACT,IAAIN,eAAe,CAAC,EAAE,CAAC;IAEpB,kBAAa,GAAkB,IAAIC,OAAO,EAAE;IAE3C,YAAO,GAAGC,SAAS,GAAG,QAAQ;IAE9B,gBAAW,GAAGC,eAAe;IAGnC,IAAI,CAACI,aAAa,EAAE;EACtB;EAEAA,aAAa;IACX,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,OAAO,CAAC,CAACC,SAAS,CAAEC,QAAQ,IAAI;MACzD,IAAI,CAACC,KAAK,GAAGD,QAAQ;MACrB,IAAI,CAACE,MAAM,CAACC,IAAI,CAAC,IAAI,CAACF,KAAK,CAAC;IAC9B,CAAC,CAAC;EACJ;EAEAG,OAAO,CAACC,IAAU;IAChB,IAAI,CAACV,IAAI,CAACW,IAAI,CAAO,IAAI,CAACR,OAAO,EAAEO,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACR,SAAS,CAAC,MAAM,IAAI,CAACH,aAAa,EAAE,CAAC;EAClG;EAEAY,eAAe,CAACC,MAAc;IAC5B,MAAMC,SAAS,GAAG,IAAI,CAACZ,OAAO,GAAG,GAAG,GAAGW,MAAM;IAC7C,IAAI,CAACd,IAAI,CAACE,GAAG,CAAOa,SAAS,CAAC,CAACX,SAAS,CAAEM,IAAI,IAAI;MAChD,IAAI,CAACM,aAAa,CAACR,IAAI,CAACE,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEAO,UAAU,CAACP,IAAU;IACnB,MAAMK,SAAS,GAAG,IAAI,CAACZ,OAAO,GAAG,GAAG,GAAGO,IAAI,CAACQ,EAAE;IAC9C,IAAI,CAAClB,IAAI,CAACmB,MAAM,CAAOJ,SAAS,EAAE,IAAI,CAACH,WAAW,CAAC,CAACR,SAAS,CAAC,MAAM,IAAI,CAACH,aAAa,EAAE,CAAC;EAC3F;;AA3CWH,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["BehaviorSubject","Subject","serverUrl","httpOptionsBase","UserService","constructor","http","retrieveUsers","get","userUrl","subscribe","userList","users","users$","next","addUser","user","post","httpOptions","setSelectedUser","userId","urlWithId","userSelected$","deleteUser","id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\amirb\\Desktop\\2022-2023-ps6-les-quiziniers\\front-end\\src\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { serverUrl, httpOptionsBase } from '../configs/server.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  /*\n   The list of user.\n   */\n  private users: User[] = [];\n\n  /*\n   Observable which contains the list of the user.\n   */\n  public users$: BehaviorSubject<User[]>\n    = new BehaviorSubject([]);\n\n  public userSelected$: Subject<User> = new Subject();\n\n  private userUrl = serverUrl + '/users';\n\n  private httpOptions = httpOptionsBase;\n\n  constructor(private http: HttpClient) {\n    this.retrieveUsers();\n  }\n\n  retrieveUsers(): void {\n    this.http.get<User[]>(this.userUrl).subscribe((userList) => {\n      this.users = userList;\n      this.users$.next(this.users);\n    });\n  }\n\n  addUser(user: User): void {\n    this.http.post<User>(this.userUrl, user, this.httpOptions).subscribe(() => this.retrieveUsers());\n  }\n\n  setSelectedUser(userId: string): void {\n    const urlWithId = this.userUrl + '/' + userId;\n    this.http.get<User>(urlWithId).subscribe((user) => {\n      this.userSelected$.next(user);\n    });\n  }\n\n  deleteUser(user: User): void {\n    const urlWithId = this.userUrl + '/' + user.id;\n    this.http.delete<User>(urlWithId, this.httpOptions).subscribe(() => this.retrieveUsers());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}