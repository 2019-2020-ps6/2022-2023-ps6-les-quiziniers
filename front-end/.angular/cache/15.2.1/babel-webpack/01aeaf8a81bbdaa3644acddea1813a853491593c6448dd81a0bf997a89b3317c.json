{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { QUIZ_LIST } from '../mocks/quiz-list.mock';\nimport { serverUrl, httpOptionsBase } from '../configs/server.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizService {\n  constructor(http) {\n    this.http = http;\n    /*\r\n     Services Documentation:\r\n     https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\r\n     */\n    /*\r\n     The list of quiz.\r\n     The list is retrieved from the mock.\r\n     */\n    this.quizzes = QUIZ_LIST;\n    /*\r\n     Observable which contains the list of the quiz.\r\n     Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\r\n     */\n    this.quizzes$ = new BehaviorSubject(this.quizzes);\n    this.quizSelected$ = new Subject();\n    this.quizUrl = serverUrl + '/quizzes';\n    this.questionsPath = 'questions';\n    this.httpOptions = httpOptionsBase;\n    this.retrieveQuizzes();\n  }\n  retrieveQuizzes() {\n    this.http.get(this.quizUrl).subscribe(quizList => {\n      this.quizzes = quizList;\n      this.quizzes$.next(this.quizzes);\n    });\n  }\n  addQuiz(quiz) {\n    this.http.post(this.quizUrl, quiz, this.httpOptions).subscribe(() => this.retrieveQuizzes());\n  }\n  setSelectedQuiz(quizId) {\n    const urlWithId = this.quizUrl + '/' + quizId;\n    this.http.get(urlWithId).subscribe(quiz => {\n      this.quizSelected$.next(quiz);\n    });\n  }\n  deleteQuiz(quiz) {\n    const urlWithId = this.quizUrl + '/' + quiz.id;\n    this.http.delete(urlWithId, this.httpOptions).subscribe(() => this.retrieveQuizzes());\n  }\n  addQuestion(quiz, question) {\n    const questionUrl = this.quizUrl + '/' + quiz.id + '/' + this.questionsPath;\n    this.http.post(questionUrl, question, this.httpOptions).subscribe(() => this.setSelectedQuiz(quiz.id));\n  }\n  deleteQuestion(quiz, question) {\n    const questionUrl = this.quizUrl + '/' + quiz.id + '/' + this.questionsPath + '/' + question.id;\n    this.http.delete(questionUrl, this.httpOptions).subscribe(() => this.setSelectedQuiz(quiz.id));\n  }\n}\nQuizService.ɵfac = function QuizService_Factory(t) {\n  return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n};\nQuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuizService,\n  factory: QuizService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAEC,OAAO,QAAQ,MAAM;AAE/C,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,SAAS,EAAEC,eAAe,QAAQ,0BAA0B;;;AAKrE,OAAM,MAAOC,WAAW;EA0BtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAzBxB;;;;IAKA;;;;IAIQ,YAAO,GAAWL,SAAS;IAEnC;;;;IAIO,aAAQ,GACX,IAAIF,eAAe,CAAC,IAAI,CAACQ,OAAO,CAAC;IAE9B,kBAAa,GAAkB,IAAIP,OAAO,EAAE;IAE3C,YAAO,GAAGE,SAAS,GAAG,UAAU;IAChC,kBAAa,GAAG,WAAW;IAE3B,gBAAW,GAAGC,eAAe;IAGnC,IAAI,CAACK,eAAe,EAAE;EACxB;EAEAA,eAAe;IACb,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,OAAO,CAAC,CAACC,SAAS,CAAEC,QAAQ,IAAI;MACzD,IAAI,CAACL,OAAO,GAAGK,QAAQ;MACvB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACP,OAAO,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAQ,OAAO,CAACC,IAAU;IAChB,IAAI,CAACV,IAAI,CAACW,IAAI,CAAO,IAAI,CAACP,OAAO,EAAEM,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACP,SAAS,CAAC,MAAM,IAAI,CAACH,eAAe,EAAE,CAAC;EACpG;EAEAW,eAAe,CAACC,MAAc;IAC5B,MAAMC,SAAS,GAAG,IAAI,CAACX,OAAO,GAAG,GAAG,GAAGU,MAAM;IAC7C,IAAI,CAACd,IAAI,CAACG,GAAG,CAAOY,SAAS,CAAC,CAACV,SAAS,CAAEK,IAAI,IAAI;MAChD,IAAI,CAACM,aAAa,CAACR,IAAI,CAACE,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEAO,UAAU,CAACP,IAAU;IACnB,MAAMK,SAAS,GAAG,IAAI,CAACX,OAAO,GAAG,GAAG,GAAGM,IAAI,CAACQ,EAAE;IAC9C,IAAI,CAAClB,IAAI,CAACmB,MAAM,CAAOJ,SAAS,EAAE,IAAI,CAACH,WAAW,CAAC,CAACP,SAAS,CAAC,MAAM,IAAI,CAACH,eAAe,EAAE,CAAC;EAC7F;EAEAkB,WAAW,CAACV,IAAU,EAAEW,QAAkB;IACxC,MAAMC,WAAW,GAAG,IAAI,CAAClB,OAAO,GAAG,GAAG,GAAGM,IAAI,CAACQ,EAAE,GAAG,GAAG,GAAG,IAAI,CAACK,aAAa;IAC3E,IAAI,CAACvB,IAAI,CAACW,IAAI,CAAWW,WAAW,EAAED,QAAQ,EAAE,IAAI,CAACT,WAAW,CAAC,CAACP,SAAS,CAAC,MAAM,IAAI,CAACQ,eAAe,CAACH,IAAI,CAACQ,EAAE,CAAC,CAAC;EAClH;EAEAM,cAAc,CAACd,IAAU,EAAEW,QAAkB;IAC3C,MAAMC,WAAW,GAAG,IAAI,CAAClB,OAAO,GAAG,GAAG,GAAGM,IAAI,CAACQ,EAAE,GAAG,GAAG,GAAG,IAAI,CAACK,aAAa,GAAG,GAAG,GAAGF,QAAQ,CAACH,EAAE;IAC/F,IAAI,CAAClB,IAAI,CAACmB,MAAM,CAAWG,WAAW,EAAE,IAAI,CAACV,WAAW,CAAC,CAACP,SAAS,CAAC,MAAM,IAAI,CAACQ,eAAe,CAACH,IAAI,CAACQ,EAAE,CAAC,CAAC;EAC1G;;;mBA7DWpB,WAAW;AAAA;;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["BehaviorSubject","Subject","QUIZ_LIST","serverUrl","httpOptionsBase","QuizService","constructor","http","quizzes","retrieveQuizzes","get","quizUrl","subscribe","quizList","quizzes$","next","addQuiz","quiz","post","httpOptions","setSelectedQuiz","quizId","urlWithId","quizSelected$","deleteQuiz","id","delete","addQuestion","question","questionUrl","questionsPath","deleteQuestion","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\amirb\\Desktop\\2022-2023-ps6-les-quiziniers\\front-end\\src\\services\\quiz.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { Quiz } from '../models/quiz.model';\nimport { QUIZ_LIST } from '../mocks/quiz-list.mock';\nimport { Question } from '../models/question.model';\nimport { serverUrl, httpOptionsBase } from '../configs/server.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuizService {\n  /*\n   Services Documentation:\n   https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\n   */\n\n  /*\n   The list of quiz.\n   The list is retrieved from the mock.\n   */\n  private quizzes: Quiz[] = QUIZ_LIST;\n\n  /*\n   Observable which contains the list of the quiz.\n   Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\n   */\n  public quizzes$: BehaviorSubject<Quiz[]>\n    = new BehaviorSubject(this.quizzes);\n\n  public quizSelected$: Subject<Quiz> = new Subject();\n\n  private quizUrl = serverUrl + '/quizzes';\n  private questionsPath = 'questions';\n\n  private httpOptions = httpOptionsBase;\n\n  constructor(private http: HttpClient) {\n    this.retrieveQuizzes();\n  }\n\n  retrieveQuizzes(): void {\n    this.http.get<Quiz[]>(this.quizUrl).subscribe((quizList) => {\n      this.quizzes = quizList;\n      this.quizzes$.next(this.quizzes);\n    });\n  }\n\n  addQuiz(quiz: Quiz): void {\n    this.http.post<Quiz>(this.quizUrl, quiz, this.httpOptions).subscribe(() => this.retrieveQuizzes());\n  }\n\n  setSelectedQuiz(quizId: string): void {\n    const urlWithId = this.quizUrl + '/' + quizId;\n    this.http.get<Quiz>(urlWithId).subscribe((quiz) => {\n      this.quizSelected$.next(quiz);\n    });\n  }\n\n  deleteQuiz(quiz: Quiz): void {\n    const urlWithId = this.quizUrl + '/' + quiz.id;\n    this.http.delete<Quiz>(urlWithId, this.httpOptions).subscribe(() => this.retrieveQuizzes());\n  }\n\n  addQuestion(quiz: Quiz, question: Question): void {\n    const questionUrl = this.quizUrl + '/' + quiz.id + '/' + this.questionsPath;\n    this.http.post<Question>(questionUrl, question, this.httpOptions).subscribe(() => this.setSelectedQuiz(quiz.id));\n  }\n\n  deleteQuestion(quiz: Quiz, question: Question): void {\n    const questionUrl = this.quizUrl + '/' + quiz.id + '/' + this.questionsPath + '/' + question.id;\n    this.http.delete<Question>(questionUrl, this.httpOptions).subscribe(() => this.setSelectedQuiz(quiz.id));\n  }\n\n  /*\n  Note: The functions below don't interact with the server. It's an example of implementation for the exercice 10.\n  addQuestion(quiz: Quiz, question: Question) {\n    quiz.questions.push(question);\n    const index = this.quizzes.findIndex((q: Quiz) => q.id === quiz.id);\n    if (index) {\n      this.updateQuizzes(quiz, index);\n    }\n  }\n\n  deleteQuestion(quiz: Quiz, question: Question) {\n    const index = quiz.questions.findIndex((q) => q.label === question.label);\n    if (index !== -1) {\n      quiz.questions.splice(index, 1)\n      this.updateQuizzes(quiz, index);\n    }\n  }\n\n  private updateQuizzes(quiz: Quiz, index: number) {\n    this.quizzes[index] = quiz;\n    this.quizzes$.next(this.quizzes);\n  }\n  */\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}